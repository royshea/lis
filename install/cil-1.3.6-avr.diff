diff -brup old/configure.in new/configure.in
--- old/configure.in	2007-02-05 13:10:29.000000000 -0800
+++ new/configure.in	2009-02-12 13:28:04.000000000 -0800
@@ -467,6 +467,20 @@ case "$target" in
     ARCHOS=sparc_SOLARIS
     ;;
 
+  # AVR Microcontroller
+  avr*)
+    AC_MSG_RESULT(configuring for embedded 8-bit AVR micro-controllers)
+
+    ARCHOS=avr_EMBEDDED
+    ;;
+
+  # MSP Microcontroller
+  msp430*)
+    AC_MSG_RESULT(configuring for embedded 16-bit MSP430 micro-controllers)
+
+    ARCHOS=msp430_EMBEDDED
+    ;;
+
   *)
     AC_MSG_ERROR([
       Unsupported platform $target -- sorry.
diff -brup old/src/cil.ml new/src/cil.ml
--- old/src/cil.ml	2007-02-05 13:10:29.000000000 -0800
+++ new/src/cil.ml	2009-04-21 13:48:47.000000000 -0700
@@ -2684,11 +2684,18 @@ let parseInt (str: string) : exp = 
     (* Construct an integer of the first kinds that fits. i must be 
     * POSITIVE  *)
     let res = 
+      (* Rewritten assuming 16-bit int type *)
       let rec loop = function
-        | ((IInt | ILong) as k) :: _ 
+        | (IInt as k) :: _
+                  when i < Int64.shift_left (Int64.of_int 1) 15 ->
+                    kinteger64 k i
+        | (IULong as k) :: _
+                  when i < Int64.shift_left (Int64.of_int 1) 16
+          ->  kinteger64 k i
+        | (ILong as k) :: _
                   when i < Int64.shift_left (Int64.of_int 1) 31 ->
                     kinteger64 k i
-        | ((IUInt | IULong) as k) :: _ 
+        | (IULong as k) :: _
                   when i < Int64.shift_left (Int64.of_int 1) 32
           ->  kinteger64 k i
         | (ILongLong as k) :: _ 
diff -brup old/src/frontc/cabs2cil.ml new/src/frontc/cabs2cil.ml
--- old/src/frontc/cabs2cil.ml	2007-02-05 13:10:29.000000000 -0800
+++ new/src/frontc/cabs2cil.ml	2009-04-21 13:51:14.000000000 -0700
@@ -1134,8 +1134,10 @@ type condExpRes = 
 (******** CASTS *********)
 let integralPromotion (t : typ) : typ = (* c.f. ISO 6.3.1.1 *)
   match unrollType t with
-          (* We assume that an IInt can hold even an IUShort *)
-    TInt ((IShort|IUShort|IChar|ISChar|IUChar), a) -> TInt(IInt, a)
+      (* Modified from 32-bit assumption to an 8-bit AVR
+       * specific set of conversions *)
+    TInt ((IShort|IChar|ISChar|IUChar), a) -> TInt(IInt, a)
+  | TInt (IUShort, a) -> TInt(IUInt, a)
   | TInt _ -> t
   | TEnum (_, a) -> TInt(IInt, a)
   | t -> E.s (error "integralPromotion: not expecting %a" d_type t)
@@ -1376,12 +1378,13 @@ let cabsTypeAddAttributes a0 t =
                       Attr("mode", [ACons(mode,[])]) -> begin
                         (trace "gccwidth" (dprintf "I see mode %s applied to an int type\n"
                                              mode (* #$@!#@ ML! d_type t *) ));
-                        (* the cases below encode the 32-bit assumption.. *)
+                        (* Modified from 32-bit assumption to an 8-bit AVR
+                         * specific set of conversions *)
                         match (ik', mode) with
                         | (IInt, "__QI__")      -> (IChar, a0')
                         | (IInt, "__byte__")    -> (IChar, a0')
                         | (IInt, "__HI__")      -> (IShort,  a0')
-                        | (IInt, "__SI__")      -> (IInt, a0')   (* same as t *)
+                        | (IInt, "__SI__")      -> (ILong, a0')
                         | (IInt, "__word__")    -> (IInt, a0')
                         | (IInt, "__pointer__") -> (IInt, a0')
                         | (IInt, "__DI__")      -> (ILongLong, a0')
@@ -1389,7 +1392,7 @@ let cabsTypeAddAttributes a0 t =
                         | (IUInt, "__QI__")     -> (IUChar, a0')
                         | (IUInt, "__byte__")   -> (IUChar, a0')
                         | (IUInt, "__HI__")     -> (IUShort, a0')
-                        | (IUInt, "__SI__")     -> (IUInt, a0')
+                        | (IUInt, "__SI__")     -> (IULong, a0')
                         | (IUInt, "__word__")   -> (IUInt, a0')
                         | (IUInt, "__pointer__")-> (IUInt, a0')
                         | (IUInt, "__DI__")     -> (IULongLong, a0')
@@ -2352,9 +2355,22 @@ let rec doSpecList (suggestedAnonName: s
               (* constant-eval 'e' to determine tag value *)
               let e' = getIntConstExp e in
               let e' = 
+                (*
+                 * Updated to handle 16-bit int types present on the AVR.
+                 * Further munged to allow out of range enums slide by.  This is
+                 * required in some embedded systems that abuse the use of enums
+                 * to define (large) constants.
+                 *)
                 match isInteger (constFold true e') with 
-                  Some i -> if !lowerConstants then kinteger64 IInt i else e'
-                | _ -> E.s (error "Constant initializer %a not an integer" d_exp e')
+                | Some i when i < Int64.shift_left (Int64.of_int 1) 15 ->
+                    if !lowerConstants then kinteger64 IInt i else e'
+                | Some i when i < Int64.shift_left (Int64.of_int 1) 16 ->
+                    if !lowerConstants then kinteger64 IUInt i else e'
+                | Some i when i < Int64.shift_left (Int64.of_int 1) 31 ->
+                    if !lowerConstants then kinteger64 ILong i else e'
+                | Some i when i < Int64.shift_left (Int64.of_int 1) 32 ->
+                    if !lowerConstants then kinteger64 IULong i else e'
+                | _ -> E.s (error "Constant initializer %a not an integer or out of integer range" d_exp e')
               in
               processName kname e' (convLoc cloc) rest
         in
diff -brup old/src/machdep.c new/src/machdep.c
--- old/src/machdep.c	2007-02-05 13:10:29.000000000 -0800
+++ new/src/machdep.c	2009-02-12 13:28:04.000000000 -0800
@@ -35,6 +35,14 @@
  *
  */
 
+/*
+ * Roy Shea <royshea@gmail.com>
+ *
+ * This machdep is hard coded to reflect the sizes and alingments used
+ * in the avr-gcc compiler.  The compiler version reflects that is
+ * distributed with the TinyOS 2.0.2 distrobution.
+ */
+
 #include "../config.h"
 
 #include <stdio.h>
@@ -43,182 +51,50 @@
 #include <stdlib.h>
 #endif
 
-#ifdef HAVE_WCHAR_H
-#include <wchar.h>
-#endif
-
-#ifdef _GNUCC
-#define LONGLONG long long
-#define CONST_STRING_LITERALS "true"
-#define VERSION __VERSION__
-#define VERSION_MAJOR __GNUC__
-#define VERSION_MINOR __GNUC_MINOR__
-#endif
-
-#ifdef _MSVC
-#define LONGLONG __int64
-#define CONST_STRING_LITERALS "false"
-#define VERSION "Microsoft C"
-#define VERSION_MAJOR (_MSC_VER / 100)
-#define VERSION_MINOR (_MSC_VER % 100)
-#endif
-
 /* The type for the machine dependency structure is generated from the
    Makefile */
 int main() {
   fprintf(stderr, "Generating machine dependency information for CIL\n");
 
   printf("(* Generated by code in %s *)\n", __FILE__);
-  printf("\t version_major    = %d;\n", VERSION_MAJOR);
-  printf("\t version_minor    = %d;\n", VERSION_MINOR);
-  printf("\t version          = \"%s\";\n", VERSION);
-  // Size of certain types
-  printf("\t sizeof_short     = %d;\n", sizeof(short));
-  printf("\t sizeof_int       = %d;\n", sizeof(int));
-  printf("\t sizeof_long      = %d;\n", sizeof(long));
-  printf("\t sizeof_longlong  = %d;\n", sizeof(LONGLONG));
-  printf("\t sizeof_ptr       = %d;\n", sizeof(int *));
-  printf("\t sizeof_enum      = %d;\n", sizeof(enum e { ONE, TWO }));
-  printf("\t sizeof_float     = %d;\n", sizeof(float));
-  printf("\t sizeof_double    = %d;\n", sizeof(double));
-  printf("\t sizeof_longdouble  = %d;\n", sizeof(long double));
-  printf("\t sizeof_void      = %d;\n", sizeof(void));
-  printf("\t sizeof_fun       = %d;\n",
-#ifdef __GNUC__
-         sizeof(main)
-#else
-         0
-#endif
-           );
-
-  // definition of size_t
-  {
-    printf("\t size_t = \"%s\";\n", TYPE_SIZE_T);
-    printf("\t wchar_t = \"%s\";\n", TYPE_WCHAR_T);
-  }
-
-  // The alignment of a short
-  {
-    struct shortstruct {
-      char c;
-      short s;
-    };
-    printf("\t alignof_short = %d;\n",
-           (int)(&((struct shortstruct*)0)->s));
-  }
-
-  // The alignment of an int
-  {
-    struct intstruct {
-      char c;
-      int i;
-    };
-    printf("\t alignof_int = %d;\n",
-           (int)(&((struct intstruct*)0)->i));
-  }
-  
-  // The alignment of a long
-  {
-    struct longstruct {
-      char c;
-      long l;
-    };
-    printf("\t alignof_long = %d;\n",
-           (int)(&((struct longstruct*)0)->l));
-  }
-
-  // The alignment of long long
-  {
-    struct longlong {
-      char c;
-      LONGLONG ll;
-    };
-    printf("\t alignof_longlong = %d;\n",
-           (int)(&((struct longlong*)0)->ll));
-  }
-
-  // The alignment of a ptr
-  {
-    struct ptrstruct {
-      char c; 
-      int * p;
-    };
-    printf("\t alignof_ptr = %d;\n",
-           (int)(&((struct ptrstruct*)0)->p));
-  }
-
-  // The alignment of an enum
-  {
-    struct enumstruct {
-      char c; 
-      enum e2 { THREE, FOUR, FIVE } e;
-    };
-    printf("\t alignof_enum = %d;\n",
-           (int)(&((struct enumstruct*)0)->e));
-  }
-
-  // The alignment of a float
-  {
-    struct floatstruct {
-      char c;
-      float f;
-    };
-    printf("\t alignof_float = %d;\n",
-           (int)(&((struct floatstruct*)0)->f));
-  }
-  
-  // The alignment of double
-  {
-    struct s1 {
-      char c;
-      double d;
-    };
-    printf("\t alignof_double = %d;\n",
-           (int)(&((struct s1*)0)->d));
-  }    
-
-  // The alignment of long  double
-  {
-    struct s1 {
-      char c;
-      long double ld;
-    };
-    printf("\t alignof_longdouble = %d;\n",
-           (int)(&((struct s1*)0)->ld));
-  }    
-
-  printf("\t alignof_str = %d;\n",
-#ifdef __GNUC__
-         __alignof("a string")
-#else
-         0
-#endif
-         );
-
-  printf("\t alignof_fun = %d;\n",
-#ifdef __GNUC__
-         __alignof(main)
-#else
-         0
-#endif
-         );
+  printf("\t version_major       = %d;\n", 3); //__GNUC
+  printf("\t version_minor       = %d;\n", 4); //__GNUC_MINOR
+  printf("\t version             = \"%s\";\n", "avr-3.4.3"); // __VERSION__
 
-  // Whether char is unsigned
-  printf("\t char_is_unsigned = %s;\n", 
-         ((char)0xff) > 0 ? "true" : "false");
-
-
-  // Whether string literals contain constant characters
-  puts("\t const_string_literals = " CONST_STRING_LITERALS ";");
-
-
-  // endianity
-  {
-    int e = 0x11223344;
-    printf("\t little_endian = %s;\n",
-           (0x44 == *(char*)&e) ? "true" :
-           ((0x11 == *(char*)&e) ? "false" : (exit(1), "false")));
-  }
+  // Size of certain types
+  printf("\t sizeof_int          = %d;\n", 2);
+  printf("\t sizeof_short        = %d;\n", 2);
+  printf("\t sizeof_long         = %d;\n", 4);
+  printf("\t sizeof_longlong     = %d;\n", 8);
+  printf("\t sizeof_ptr          = %d;\n", 2);
+  printf("\t sizeof_enum         = %d;\n", 2);
+  printf("\t sizeof_longdouble   = %d;\n", 4);
+  printf("\t sizeof_void         = %d;\n", 1);
+  printf("\t sizeof_fun          = %d;\n", 1);
+  printf("\t sizeof_float        = %d;\n", 4);
+  printf("\t sizeof_double       = %d;\n", 4);
+
+  // Alignment of certain types
+  printf("\t alignof_short       = %d;\n", 1);
+  printf("\t alignof_int         = %d;\n", 1);
+  printf("\t alignof_long        = %d;\n", 1);
+  printf("\t alignof_float       = %d;\n", 1);
+  printf("\t alignof_ptr         = %d;\n", 1);
+  printf("\t alignof_longlong    = %d;\n", 1);
+  printf("\t alignof_double      = %d;\n", 1);
+  printf("\t alignof_longdouble  = %d;\n", 1);
+  printf("\t alignof_str         = %d;\n", 1);
+  printf("\t alignof_fun         = %d;\n", 1);
+  printf("\t alignof_enum        = %d;\n", 1);
+
+  // These are best guesses...
+  printf("\t wchar_t             = \"%s\";\n", "unsigned int");
+  printf("\t size_t              = \"%s\";\n", "unsigned int");
+
+  // Few other details
+  printf("\t char_is_unsigned    = %s;\n", "false");
+  puts("\t const_string_literals = " "true" ";");
+  printf("\t little_endian       = %s;\n", "true");
 
   exit(0);
 } 
