LowLog
======
Roy Shea <royshea@gmail.com>

A code analysis and instrumentation framework that can be applied to
TinyOS programs to extract high quality logs from nodes.  It has full
TinyOS integration and is easy.  For example, logging in the
`RadioCountToLedsC` component is enabled at compile time using:

----
LOG_PREFIX="RadioCountToLedsC" make telosb lowlog
make telosb reinstall,2
----

The rest of this document describes the installation of LowLog and
briefly introduces how to begin using it to obtain logs from interesting
regions of your own projects.


Quick Start
-----------

Build CIL Patched for Embedded Development and LowLog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Download and run with `sh` this link:install.sh[install script] from a
directory where you want to install CIL and a TinyOS git repository with
LowLog.  Note that the script uses `sudo` to install ocaml and git-core.
The script is also listed here for reference:

[shell]
source~~~~
include::install.sh[]
source~~~~

After installing all of LowLog you will need to set up your TinyOS build
environment for the freshly installed version of TinyOS located in
`tinyos-2.x-git`.  You can do this by hand or by executing:

----
. lowlog_setup.sh
----

from the base `tinyos-2.x-git` directory created during installation.


Build the Demonstration Application with Logging
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

----
cd $TOSROOT/apps/LogTapRadioCountToLeds
LOG_PREFIX="RadioCountToLedsC" make telosb lowlog
make telosb reinstall,2
----


Gather and Examine Traces
~~~~~~~~~~~~~~~~~~~~~~~~~

This requires that the LogTapRadioCountToLeds node programmed above be
running and that a BaseStation node be connected to the computer to pass
data on to the serial forwarder.

In the first terminal:

----
$TOSROOT/support/sdk/c/sf/sf 9002 /dev/ttyUSB0 115200
----

In the second terminal:

----
$TOSROOT/support/utils/lowlog/parser/timestampedlisten localhost 9002 | tee trace.txt
----

In the second terminal you should see a combination of short count
packets (about each second) and longer LowLog packets (about once a
second).  After a few seconds you can stop the programs in both
terminals.  To view the trace use the parser:

----
export LOG_DIR=$TOSROOT/apps/LogTapRadioCountToLeds/build/telosb
$TOSROOT/support/utils/lowlog/parser/parseLog.py -t trace.txt \
        -e $LOG_DIR/enum_entry_point_functions.txt \
        -b $LOG_DIR/enum_calls_in_roi.txt \
        -r $LOG_DIR/roi.txt
----


More Detailed Look at Using LowLog
-----------------------------------

Wire LogTapC into the Program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

LowLog enabled applications need to include the `LogTapC` component to
facilitate transfer of logging messages.  The component for the
application needs to wire in the `LogTapC` component.  The addition will
look something like:

----
configuration ExampleAppC {}

implementation {
  
  /* Normal body of implementation elided. */
  /* ... */

  /* Wiring LogTapC into the program. */
  components LogTapC;
  LogTapC.Boot -> MainC;
}
----

and the `Makefile` must be extended to find the `LogTapC` component:

----
COMPONENT=ExampleAppC

# PLAGS extended to include logtap
PFLAGS += -I$(TOSDIR)/lib/logtap -I$(TOSDIR)/../apps/RadioCountToLeds

include $(MAKERULES)
----


Specifying a Region of Interest (ROI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logging is only performed in a specified region of interest (ROI).  The
ROI is specified by a list of function prefixes.  Any function that
begins with any of the specified prefixes will be included in the ROI
that is instrumented by LowLog.

Prefix matching is will suited to TinyOS programs where name mangling,
used by NesC, results in function names of the form:

----
<ComponentName>$<InterfaceName>$<FunctionName>
----

Note that LowLog replaces these dollar signs with underscores.  We could
enable logging in any of the LED related functions using the prefix
`LedsP_Leds`, since the LED functionality is implemented in the `LedsP`
component and accessed via the `Leds` interface.  You can specify more
than one prefix by separating them with spaces.  For example:

----
LOG_PREFIX="RadioCountToLedsC LedsP_Leds" make telosb lowlog
----

enables tracing in all functions implemented directly by the
`RadioCountToLedsC` component and all `LedsP` related functions using
the `Leds` interface.

If you are unfamiliar with NesC name mangling or unsure of what
component or interface is of interest in a program you want gather logs
from, take a look at the `app.c` file (located in the `build/<target>`
directory after making an application) generated by NesC during normal
compilation.
