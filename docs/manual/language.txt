LIS Language Specification
==========================

Formal LIS Specification
------------------------

$$$\begin{eqnarray}
\mathit{Start} & \rightarrow & \mathit{Statements} \mathit{~} | \mathit{~} \epsilon
\\ \mathit{Statements} & \rightarrow & \mathit{Stmt} \mathit{~} \mathit{Statements} \mathit{~} | \mathit{~} \mathit{Stmt}
\\ \mathit{Stmt} & \rightarrow & \mathit{Header} \mathit{~} | \mathit{~} \mathit{Footer} \mathit{~} | \mathit{~} \mathit{Call} \mathit{~} | \mathit{~} \mathit{ControlFlow} \mathit{~} | \mathit{~} \mathit{Watch}
\\ \mathit{Header} & \rightarrow & \mathtt{header} \mathit{~} \mathit{Placement} \mathit{~} \mathit{Scope}
\\ \mathit{Footer} & \rightarrow & \mathtt{footer} \mathit{~} \mathit{Placement} \mathit{~} \mathit{Scope}
\\ \mathit{Call} & \rightarrow & \mathtt{call} \mathit{~} \mathit{Placement} \mathit{~} \mathit{Scope} \mathit{~} \mathit{Target}
\\ \mathit{ControlFlow} & \rightarrow & \mathtt{controlflow} \mathit{~} \mathit{Placement} \mathit{~} \mathit{Scope} \mathit{~} \mathit{Flag} \mathit{~} \mathit{Var}
\\ \mathit{Watch} & \rightarrow & \mathtt{watch} \mathit{~} \mathit{Placement} \mathit{~} \mathit{Scope} \mathit{~} \mathit{Var}
\\ \mathit{Placement} & \rightarrow & \mathit{F}
\\ \mathit{Scope} & \rightarrow & \mathtt{global} \mathit{~} | \mathit{~} \mathtt{local} \mathit{~} | \mathit{~} \mathtt{point}
\\ \mathit{Target} & \rightarrow & \mathit{F} \mathit{~} | \mathit{~} \mathtt{--PTR--}
\\ \mathit{Flag} & \rightarrow & \mathtt{if} \mathit{~} | \mathit{~} \mathtt{switch} \mathit{~} | \mathit{~} \mathtt{loop} \mathit{~} | \mathit{~} \mathtt{if-switch} \mathit{~} | \mathit{~} \mathtt{if-loop} \mathit{~}
\\ & & | \mathit{~} \mathtt{switch-loop} \mathit{~} | \mathit{~} \mathtt{if-switch-loop}
\\ \mathit{Var} & \rightarrow & \langle \mathrm{Varible name from program} \rangle \mathit{~} | \mathit{~} \mathtt{--ANY--}
\\ \mathit{F} & \rightarrow & \langle \mathrm{Function name from program} \rangle
\end{eqnarray}$$$


Description of the Five LIS Statement Types
-------------------------------------------

A LIS script contains one or more statements.  There are five basic LIS
statement types: header, footer, call, conditional, and watch
statements.  All statement types include a _placement_ and _scope_
specifier.  The _placement_ specifier is the name of the function that
the statement should be applied to.  The _scope_ specifier describes the
name space from which the logged token should be taken and can be one of
+global+, +local+, or +point+.  For more information on token scoping,
look at the link:scoping.html[scoping documentation].


Header
~~~~~~

+header+ _placement_ _scope_

Log a token taken from _scope_ when function _placement_ is entered.

Footer
~~~~~~

+footer+ _placement_ _scope_

Log a token taken from _scope_ when returning from function _placement_.

Call
~~~~

+call+ _placement_ _scope_ _target_

Log a token taken from _scope_ when function _placement_ calls into
function _target_.  The special +__PTR__+ token (note the two leading
and trailing underscores) can be used as the _target_to log function
pointer calls.

Conditional
~~~~~~~~~~~

+conditional+ _placement_ _scope_ _flag_ _var_

Log a token taken from _scope_ describing the branch taken by control
flow statement of type _flag_ and guarded by an expression using the
variable _var_ within function _placement_.  The _flag_ is an ORed set
of:

* 1 to denote +if-else+ statements
* 2 to denote +switch-case+ statements
* 4 to denote loops (such as +while+ and +for+ constructs)

Thus, a flag value of 5 will log loop constructs and +if-else+
statements, but not +switch-case+ statements.  If filtering on _var_ is
not desired, the special +__NULL__+ token (note the two leading and trailing
underscores) can be used.

Watch
~~~~~

+watch+ _placement_ _scope_ _var_

Log a token taken from _scope_ followed by the value of _var_ each time
that _var_ appears as an l-value within function _placement_.
