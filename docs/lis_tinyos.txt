LIS and TinyOS
==============
Roy Shea <royshea@gmail.com>

LIS was specifically developed for collecting data from resource
constrained wireless embedded systems.  We have provided full
integration with the TinyOS 2.x operating system.  This support
provides:

* Build integration via a new "lis" option as an add-on to the mica2,
  micaZ, and TelosB targets
* Low overhead +bitlog+ runtime library providing basic logging support
* Multi-hop log delivery using the
  http://www.tinyos.net/tinyos-2.1.0/doc/html/tep123.html[collection
  tree protocol]
* Single-hop log delivery using the +AMSend+ interface


The rest of this document describes the installation of LowLog and
briefly introduces how to begin using it to obtain logs from interesting
regions of your own projects.


.TinyOS Tool Chain
[NOTE]
These instructions assume that the TinyOS tool chain is already
installed for both AVR and MSP430 targets.  For more information on
installing this tool chain, look at
http://www.tinyos.net/tinyos-2.x/doc/html/install-tinyos.html[Installing
TinyOS 2.0.2].


Installation
------------

Begin by installing LIS using the general
link:installation.html[installation instructions].  Navigate to
+$LISDIR/install+ and execute the installation script.  The installation
script takes two parameters to describe where the root of the LIS
installation is located and where the TinyOS repository should be
installed.  Feel free to set +TOSROOT+ to a system specific value.

----
cd $LISDIR/install/
TOSROOT=$HOME/tinyos-2.1.0
sh install_tos.sh $LISDIR $TOSROOT
----

This script downloads the 2.1.0 version of TinyOS using CVS, inserts LIS
into the acquired TinyOS distribution, and build the +bitlog+ library
for the AVR and MSP430 targets.  This last step assumes the presence of
the +avr-gcc+ and +msp430-gcc+.

Continue by building the serial forwarder provided by TinyOS and the
timestamped listener used by LIS:

----
cd $TOSROOT/support/sdk/c/sf
./bootstrap
./configure
make
cd $TOSROOT/support/utils/lowlog/listener
make
----

Preparing to Use LIS and TinyOS
-------------------------------

After installing TinyOS with all LIS you will need to set up your TinyOS build
environment for the freshly installed version of TinyOS located in
`tinyos-2.x-git`.  You can do this by hand or by executing:

----
. lowlog_env_setup.sh
----

from the base TinyOS directory created during installation.

Example 1: Gathering LIS Logs from an Avrora Simulation of Mica2 Motes
----------------------------------------------------------------------

Simulation provides a great medium for developing and debugging
applications.  This example walks through gathering logs from a
simulated network of Mica2 motes.  The LogTap log management component
is used to transmit logs over the serial interface of each mote.

Install Avrora
~~~~~~~~~~~~~~

Download and build the latest version of Avrora from the Avrora source
forge website.

----
cvs -d:pserver:anonymous@avrora.cvs.sourceforge.net:/cvsroot/avrora login
cvs -z3 -d:pserver:anonymous@avrora.cvs.sourceforge.net:/cvsroot/avrora co -P avrora
cd avrora
make
----

Build the Demonstration Application with (Serial) Logging from LIS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example uses serial based logging provided by the LogTap component,
rather than the multi-hop logging used in the prior example.  The LogTap
component flushes logs out over the serial interface of a node.  This
makes it a great addition to testbed deployments with a wired backplane
and for simulation.

.Avrora, 4bitle, and CTP
[NOTE]
As of early 2010, the radio simulation in Avrora appears to confuse the
4bitle component used by CTP in TinyOS.  Consequently, Avrora is
currently best suited to using the serial based logging framework
provided by the LogTap component.

----
# Move into demo directory
cd $TOSROOT/apps/LogTapRadioCountToLeds

# Generate image instrumented using LowLog to collect call traces
# through the Receive.receive and MilliTimer.fired components
LIS_PATH=$LIS CPATH=$LIS_PATH/bitlog LOG_PREFIX="RadioCountToLedsC__Receive__receive RadioCountToLedsC__MilliTimer__fired" make mica2 lowlog
-----

Collect Logs from a Simulated Network of Nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start an Avrora simulation:

----
AVRORA=</path/to/avrora/bin>
java -cp $AVRORA avrora/Main -colors=false -platform=mica2 \
    -simulation=sensor-network -monitors=real-time,leds,packet,serial \
    -update-node-id -stagger-start=1234 -ports=0:0:2390,1:0:2391 -nodecount=2 \
    build/mica2/lowlog.elf
----

Key parameters specified on the command line include:
- Type of device being simulated: +platform=mica2+
- Request serial output from all nodes with node 0 sending its output
  to port 2390 and node 1 sending its output to port 2391:
  +monitors=...,serial+ and +ports=0:0:2390,1:0:2391+
- Update the node identifier within the elf file +update-node-id+
- Simulate two nodes: +nodecount=2+

From another terminal, connect a TinyOS serial listener to node 0 and
redirect its output to a log file:

----
java -cp $TOSROOT/support/sdk/java/tinyos.jar net.tinyos.tools.Listen -comm network@localhost:2390 > node0.log
----

From another terminal, connect a TinyOS serial listener to node 1 and
redirect its output to a log file:

----
java -cp $TOSROOT/support/sdk/java/tinyos.jar net.tinyos.tools.Listen -comm network@localhost:2391 > node1.log
----

Let the simulation run for a few seconds and then stop it by typing
CTRL-C in the terminal running the Avrora simulation.  Each of the
serial listeners can also be stopped by typing CTRL-C in their
respective terminals.

Examine Log Traces
~~~~~~~~~~~~~~~~~~

Use the LIS parser to view the logs.

----
LOGDIR=$TOSROOT/apps/LogTapRadioCountToLeds/build/mica2
$LISDIR/parser/parseLog.py -m network $LOGDIR/app.lis.rlis node0.log
$LISDIR/parser/parseLog.py -m network $LOGDIR/app.lis.rlis node1.log
----

Example 2: Gathering LIS Logs from a Network of TelosB Motes
------------------------------------------------------------

This example walks through the process of gathering logs from a network
of TelosB motes.  The logs are generated using LIS, routed over the
collection tree protocol (CTP) to the sink node using the MultihopLogTap
component, and finally parsed.  This example demonstrates how LIS is
used to gather logs from a deployment using real nodes.

Build the Demonstration Application with Multihop Logging from LIS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The TinyOS support can be accessed via one of two modes: directly via
LIS scripts or using a higher level analysis that implements optimized
call trace generation.

----
# Move into demo directory
cd $TOSROOT/apps/MultihopLogTapRadioCountToLeds

# Generate image instrumented based on the "crc.lis" script
LIS_PATH=$LISDIR CPATH=$LIS_PATH/bitlog \
    LIS_FILE=crc.lis make telosb lis

# Connect a telosb mote
make telosb reinstall,2

# Connect a different telosb mote
make telosb reinstall,0
-----


----
# Move into demo directory
cd $TOSROOT/apps/MultihopLogTapRadioCountToLeds

# Generate image that gathers call traces through the LedsP and
# CtpRoutingEngineP TinyOS components.
LIS_PATH=$LISDIR CPATH=$LIS_PATH/bitlog \
    LOG_PREFIX="LedsP CtpRoutingEngineP" make telosb lowlog

# Connect a telosb mote
make telosb reinstall,2

# Connect a different telosb mote
make telosb reinstall,0
----

Gather and Examine Traces
~~~~~~~~~~~~~~~~~~~~~~~~~

This requires that the +MultihopLogTapRadioCountToLeds+ with identifier
0 (programmed above) be connected to the PC, where it acts as the root
of a collection tree.  The +MultihopLogTapRadioCountToLeds+ with
identifier 2 should be powered on.  The LEDs should blinking on both
motes, indicating communication between them.

In the first terminal start the serial forwarder on the PC:

----
$TOSROOT/support/sdk/c/sf/sf 9002 /dev/ttyUSB0 115200
----

In the second terminal start the timestamped listen utility that prints
hex dumps of packets along with timestamps:

----
$TOSROOT/support/utils/lowlog/listener/timestampedlisten localhost 9002 | tee trace.txt
----

In the second terminal you should see a combination of short count
packets (about each second) and longer LowLog packets (about once a
second).  After a few seconds you can stop the programs in both
terminals.  To view the trace use the LIS parser:

----
LOGDIR=$TOSROOT/apps/MultihopLogTapRadioCountToLeds/build/telosb
$LISDIR/parser/parseLog.py -m network $LOGDIR/app.lis.rlis trace.txt
----

More Detailed Look at Using LIS with TinyOS
-------------------------------------------

Wiring LogTapC or MultihopLogTapC into the Program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

LowLog enabled applications need to include a component implementing the
+LogTap+ interface.  Such a component handles logs once they have been
flushed out of the +bitlog+ library.  We have implemented two components
in TinyOS: +LogTapC+ and +MultihopLogTapC+.  The first dumps logs
directly to the UART and the latter multihops logs out of the network
using CTP.

An example of wiring +LogTapC+ into an application is provided in
+$TOSROOT/apps/LogTapBlink/BlinkAppC.nc+.  An example of wiring
+MultihopLogTapC+ into an application is provided in
+$TOSROOT/apps/MultihopLogTapRadioCountToLeds/MultihopLogTapRadioCountToLedsAppC.nc+.

The +Makefile+ must also be extended to include to include an updated
+PFLAGS+ and +CFLAGS+.  For example, the +Makefile+ for for
+MultihopLogTapRadioCountToLedsApp+:

----
COMPONENT=MultihopLogTapRadioCountToLedsAppC

CFLAGS += -I$(TOSDIR)/lib/net/ -I$(TOSDIR)/lib/net/ctp  -I$(TOSDIR)/lib/net/4bitle

PFLAGS += -I$(TOSDIR)/lib/multihoplogtap -I$(TOSDIR)/../apps/RadioCountToLeds

include $(MAKERULES)
----


Specifying a Region of Interest (ROI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logging is only performed in a specified region of interest (ROI).  The
ROI is specified by a list of function prefixes.  Any function that
begins with any of the specified prefixes will be included in the ROI
that is instrumented by LowLog.

Prefix matching is will suited to TinyOS programs where name mangling,
used by NesC, results in function names of the form:

----
<ComponentName>$<InterfaceName>$<FunctionName>
----

Note that LowLog replaces these dollar signs with two underscores.  We
could enable logging in any of the LED related functions using the
prefix `LedsP__Leds`, since the LED functionality is implemented in the
`LedsP` component and accessed via the `Leds` interface.  You can
specify more than one prefix by separating them with spaces.  For
example:

----
LOG_PREFIX="RadioCountToLedsC LedsP__Leds" make telosb lowlog
----

enables tracing in all functions implemented directly by the
`RadioCountToLedsC` component and all `LedsP` related functions using
the `Leds` interface.

If you are unfamiliar with NesC name mangling or unsure of what
component or interface is of interest in a program you want gather logs
from, take a look at the `app.c` file (located in the `build/<target>`
directory after making an application) generated by NesC during normal
compilation.
